<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xsi:schemaLocation="http://www.springframework.org/schema/beans 
        http://www.springframework.org/schema/beans/spring-beans.xsd  
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx 
        http://www.springframework.org/schema/tx/spring-tx.xsd
        ">
      
    <!-- 配置数据库属性   -->      
    <context:property-placeholder location="classpath:jdbc.properties"/>  
    <!-- 数据库连接池   -->  
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    	<property name="driverClass" value="${jdbc.driverClass}"></property>
    	<property name="jdbcUrl" value="${jdbc.url}"></property>
    	<property name="user" value="${jdbc.username}"></property>
    	<property name="password" value="${jdbc.password}"></property>
    	
        <!-- c3p0连接池私有属性   为了高并发而做的  -->  
        <property name="maxPoolSize" value="1000"></property>
        <property name="minPoolSize" value="30"></property> 
        <!-- 连接池在回收数据库连接时是否自动提交事务   -->  
        <property name="autoCommitOnClose" value="false"></property>
        <!-- 当获取连接超时时间   -->  
        <property name="checkoutTimeout" value="10000"></property>
        <!-- 当获取连接失败重试次数   -->  
        <property name="acquireRetryAttempts" value="2"></property>
    </bean>
    
    <!-- MyBatis配置开始 -->
        
    <!-- MyBatis的sqlSessionFactory配置 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 注入数据库连接池 -->
        <property name="dataSource" ref="dataSource" /> 
        <!-- 配置mybatis全局配置文件 -->
        <property name="configLocation" value="classpath:/mybatis/configuration/config.xml"/>
        <!--扫描sqlmapper的xml文件-->
        <property name="mapperLocations" value="classpath:/mybatis/*Mapper.xml" />
        <!--扫描包  使用别名  多个可以用分号分开-->
        <property name="typeAliasesPackage" value="com.sdo.entity" />
    </bean>
    
    <!-- <bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
       <constructor-arg index="0" ref="sqlSessionFactory" />
       <constructor-arg index="1" value="BATCH" />
    </bean>
 -->
    <!--spring和mybatis整合后  扫描basePackage接口  动态生成实现dao接口的实现类 注入到spring容器中 mapper等同于实现类-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.sdo.*.dao" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
    </bean>
    <!-- MyBatis配置结束 -->
    
   
    
    
     <context:component-scan base-package="com.sdo">   
    <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />   
    </context:component-scan>  
    
    <!-- 配置事务管理器 -->
     <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    	<property name="dataSource" ref="dataSource"></property>
    </bean>   

	<!-- 开启注解事务 -->
	  <tx:annotation-driven transaction-manager="transactionManager"/> 
	  
	<bean id="redisDao" class="com.sdo.seckill.dao.cache.RedisDao">
        <constructor-arg index="0" value="localhost"/>
        <constructor-arg index="1" value="6379"/>
    </bean> 
      
</beans>        